{"creationTimeStamp":"2023-05-03T04:02:37.126Z","modifiedTimeStamp":"2023-05-07T04:38:29.919Z","createdBy":"Sundaresh.Sankaran@sas.com","modifiedBy":"Sundaresh.Sankaran@sas.com","name":"NLP - Extract Rule Configuration.step","displayName":"NLP - Extract Rule Configuration.step","localDisplayName":"NLP - Extract Rule Configuration.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","uri":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","uri":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","uri":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","uri":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","uri":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","uri":"/dataFlows/steps/6c41214c-7508-4f05-9549-23a0cb74e8bd","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[{"name":"listOfRuleConfigs","displayName":"listOfRuleConfigs","localDisplayName":"listOfRuleConfigs","minEntries":0,"maxEntries":1,"defaultEntries":0,"type":"table"}],"outputPorts":[{"name":"generatedRuleConfigs","displayName":"generatedRuleConfigs","localDisplayName":"generatedRuleConfigs","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"param\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"listOfRuleConfigs\",\n\t\t\t\t\t\"type\": \"inputtable\",\n\t\t\t\t\t\"label\": \"Input table:\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"readonly\": false\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section4\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"text1\",\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"To extract from a list of rule configurations, add an input table (or an input port if running within a flow), or\",\n\t\t\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\t\t\"!$singleRuleConfig\",\n\t\t\t\t\t\t\t\t\"&\",\n\t\t\t\t\t\t\t\t\"!$generateList\"\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"generateList\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Generate a list of rule configuration tables\",\n\t\t\t\t\t\t\t\"visible\": \"!$singleRuleConfig\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section2\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Fill this section if you want to generate a list of rule configuration tables.\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"$generateList\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"projectCaslibFullName\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Provide caslib name from SAS Visual Text Analytics (VTA) - Model Studio project:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"text2\",\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"Ensure you provide a SAS dataset (not CAS table) for the output port titled \\\"generatedRuleConfigs\\\".\",\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"singleRuleConfig\",\n\t\t\t\t\t\t\t\"type\": \"checkbox\",\n\t\t\t\t\t\t\t\"label\": \"Extract single rule configuration table\",\n\t\t\t\t\t\t\t\"visible\": \"!$generateList\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"section1\",\n\t\t\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\t\t\"label\": \"Fill this section if you need to extract only one rule configuration table.\",\n\t\t\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\t\t\"visible\": \"$singleRuleConfig\",\n\t\t\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"projectCaslibFullNameSingle\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Provide caslib name from SAS Visual Text Analytics (VTA) - Model Studio project:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\"id\": \"ruleConfigName\",\n\t\t\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\t\t\"label\": \"Name of rule configuration table:\",\n\t\t\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"section3\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Output specifications\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"outputCaslibRef\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide libref pointing to a caslib for output rule configurations:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\t\t\"visible\": \"!$generateList\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"generatedRuleConfigs\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"List of rule configurations:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"WORK.DEFAULTLISTOFRULECONFIGS\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"NLP - Extract Rule Configuration\\n\\nThis custom step extracts the rule configuration within rules-based Visual Text Analytics Concepts or Categories model definitions for use in downstream applications.\\n\\nModern AI demands greater transparency and easier access to underlying metadata.  Rule configurations help explain model logic to business stakeholders, promote better model governance, assist in customising models and enable  visualisation.\\n\\nThis custom step identifies and extracts such rule configuration tables (located inside system tables) associated with a project, to a user-specified SAS Cloud Analytics Services (CAS) library (a caslib) so that it's easily accessible.  It also makes the rule configuration output more consummable through deriving additional columns.  This custom step  requires a SAS Visual Text Analytics license.\\n \\n\\nParameters:\\n\\nThis custom step runs on data loaded to a SAS Cloud Analytics Services (CAS) library (known as a caslib). Ensure you are connected to CAS before running this step.\\n\\nPrior to running this step, carry out the following task.  Note the system-generated caslib name for your required Model Studio (VTA) project. To do this, open the project and go to the Data tab. Copy the entire text appearing on the Properties pane on the right hand side, under the section \\\"Location\\\" (of the form cas-shared-default/Analytics_project_xxx).  Paste the entire selection in this field.  The custom step contains methods to parse the caslib portion of this text.  \\n\\nThere are three tasks you can carry out with this custom step, as offered in the input parameters.\\n\\nInput parameters:\\n\\n1. Extract tables from a specified list of rule configurations : for this purpose, attach a table containing a list of desired rule configurations to the input data port (an optional port) of this step. At a minimum, the table should contain\\n\\n   i) Name : name of the rule configuration table.\\n  ii) Project_Caslib : name of the system caslib attached to the Model Studio project.\\n  iii) Type : either CATEGORY or CONCEPT based on the project\\n   iv) Astore_Name : name of the astore created after compiling this rule configuration.  Note this is an optional field carried through for informational purposes.\\n\\n2.  Extract a single rule configuration table :  this operates on the same principle, with the difference that instead of a list, you can provide a single table name and caslib through the UI. Provide the following:\\n\\n   i) Project caslib (text field) : system-generated project caslib  for a Model Studio project.\\n   ii) Name of rule configuration table (text field) : system-generated rule configuration table name\\n\\n3. Generate a list of rule configurations : in case you don't yet know the names of the tables you wish to extract,  choose this option to generate a list of all rule configuration tables  located within the system caslib.  Provide the following.\\n\\n   - System caslib name for the Model Studio project (text field) : following same instruction as mentioned above. \\n\\n\\nOutput specifications:\\n\\n1. Output list of rule configurations (table, output port, optional): connect a SAS dataset which will list all rule configuration tables obtained from a project. This is needed only when you are generating a list of rule configurations.  \\n\\nNote: please DON'T add a CAS table to this output port as this will lead to the step erroring out.  In any event, a CAS table isn't necessary for this output, which typically does not contain more than 4-5 observations. \\n\\n2. Output caslib for extracted rule configuration tables (text field): fill this in if you are performing extraction tasks.  For example, provide Public to indicate that you want all rule configurations to be saved to the shared Public caslib. \\n\\nThe rule configuration tables listed in the output are named as per a pattern : <astore_name>_<type>_RULESCONFIG.sashdat.  The <astore_name> is usually a long alphanumeric string which is also the same name as the model binary generated.  The <type> could refer to either CATEGORY or CONCEPT based on the model in question.\\n\\n\\nDocumentation:\\n\\n- The table.caslibInfo CAS action : https://go.documentation.sas.com/doc/en/pgmsascdc/v_038/caspg/cas-table-caslibinfo.htm is used for purposes of listing out the tables within a SAS Model Studio's project caslib.  Typical users may find it difficult to access information in the project caslib through the interface, therefore raising need for this custom step.\\n\\n\\nCreated / contact : \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\\n\\nVersion : 1.0.   (02MAY2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"listOfRuleConfigs\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t},\n\t\t\"generateList\": false,\n\t\t\"projectCaslibFullName\": \"\",\n\t\t\"singleRuleConfig\": false,\n\t\t\"projectCaslibFullNameSingle\": \"\",\n\t\t\"ruleConfigName\": \"\",\n\t\t\"outputCaslibRef\": \"PUBLIC\",\n\t\t\"generatedRuleConfigs\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t}\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n/*-----------------------------------------------------------------------------------------*\n   MACRO VARIABLE DECLARATIONS.\n*------------------------------------------------------------------------------------------*/\n\n%global listOfRuleConfigs;\n\n\n/*-----------------------------------------------------------------------------------------*\n   START MACRO DEFINITIONS.\n*------------------------------------------------------------------------------------------*/\n\n/* -----------------------------------------------------------------------------------------* \n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n*------------------------------------------------------------------------------------------ */\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to check if an input table has been provided.  If not, the program aborts.\n*------------------------------------------------------------------------------------------*/\n\n%macro check_input_table(listOfRuleConfigs);\n   %put &listOfRuleConfigs.;\n   %if %sysevalf(%superq(listOfRuleConfigs)=,boolean)  %then %do;\n      %put NOTE: Provide a valid input table.;\n      %abort exit 4321;\n   %end;\n%mend check_input_table;\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to extract a rule configuration as per specified parameters.\n*------------------------------------------------------------------------------------------*/\n\n%macro extract_rule_config(ruleConfigName, projectType, astoreName, projectCaslib);\n\n   %put &projectCaslib.;\n\n   proc cas;\n\n/*-----------------------------------------------------------------------------------------*\n   Source code blocks\n*------------------------------------------------------------------------------------------*/\n      source CategoryCode;\n         data &outputCaslib..tempRuleConfig (drop=re) ;\n            length Astore_Name $100. Project_Caslib $100. Ruleconfig_Name $100. Type $20. category_name varchar(*) rule_string varchar(*);\n         set &outputCaslib..tempRuleConfig;\n            Astore_Name=\"&astoreName.\";\n            Project_Caslib=\"&projectCaslib.\";\n            Type=\"&projectType.\";\n            Ruleconfig_Name=\"&ruleConfigName.\";\n            re=PRXPARSE('/(\\(.*\\))/');\n            category_name=scan(config,2,\":\");\n            if prxmatch(re, config) then do;\n               rule_string=prxposn(re,1, config);\n            end;\n            config=compbl(config);\n         run;\n      endsource;\n\n      source ConceptCode;\n         data &outputCaslib..tempRuleConfig (drop=i) ;\n            length Astore_Name $100. Project_Caslib $100. Ruleconfig_Name $100. Type $20. configline entity_attribute rule_string concept_name varchar(*);\n         set &outputCaslib..tempRuleConfig;\n            Astore_Name=\"&astoreName.\";\n            Project_Caslib=\"&projectCaslib.\";\n            Type=\"&projectType.\";\n            Ruleconfig_Name=\"&ruleConfigName.\";\n            do i = 1 to sum(count(config,\"0A\"x),1);\n               entity_attribute=\"\";\n               rule_string=\"\";\n               concept_name=\"\";\n               configline=scan(config,i,\"0A\"x,\"MO\");\n               concept_name=scan(configline,2,\":\",\"MO\");\n               entity_attribute=scan(configline,1,\":\",\"MO\");\n               if compress(entity_attribute) in (\"PRIORITY\",\"FULLPATH\",\"PREDEFINED\") then do;\n                  rule_string=transtrn(configline,compress(entity_attribute||\":\"||concept_name||\":\"),\"\");\n               end;\n               else if compress(entity_attribute) in (\"ENABLE\",\"CASE_INSENSITIVE_MATCH\") then do;\n                  rule_string=transtrn(configline,compress(entity_attribute||\":\"||concept_name),\"\");\n               end;\n               else do;\n                  entity_attribute=\"RULE\";\n                  rule_string=transtrn(configline,compress(concept_name||\":\"),\"\");\n               end;\n               output;\n            end;\n         run;\n      endsource;\n\n/*-----------------------------------------------------------------------------------------*\n   Obtain values from the UI\n*------------------------------------------------------------------------------------------*/\n\n      projectCaslib=\"&projectCaslib.\";\n      targetCaslib=symget(\"outputCaslib\");\n      nameTable=compress(symget(\"ruleConfigName\"));\n      projectType=\"&projectType.\";\n\n      print projectType;\n \n      table.copyTable /\n \t    table={name=nameTable, caslib=projectCaslib}\n         casout={name=\"tempRuleConfig\", caslib=targetCaslib, replace=True}\n      ;\n      \n      if projectType==\"CATEGORY\" then do;\n         dataStep.runCode / \n            code=CategoryCode;  \n      end;\n      else if projectType==\"CONCEPT\" then do;\n         dataStep.runCode / \n            code=ConceptCode;  \n      end;\n\n     table.save /\n         table={name=\"tempRuleConfig\", caslib=targetCaslib}\n         name=nameTable\n         caslib=targetCaslib\n         replace=True\n      ;\n   quit;\n\n%mend extract_rule_config;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Macro to loop over rule configuration table and operate on each observation.\n*------------------------------------------------------------------------------------------*/\n%macro loop_over_observations(listOfRuleConfigs);\n   proc sql noprint;\n      select count(*) into:nbr_configs from &listOfRuleConfigs.;\n   quit;\n   \n   %do n=1 %to &nbr_configs.;\n      data _null_;\n      set &listOfRuleConfigs.;\n         if _n_=&n. then do;\n            call symput(\"ruleConfigName\",Name);\n            call symput(\"projectType\",Type);\n\t        call symput(\"astoreName\",AstoreName);\n            call symput(\"projectCaslib\", Project_Caslib);\n         end;\n      run;\n\n      %put &projectCaslib.;\n\n\n      %extract_rule_config(&ruleConfigName., &projectType., &astoreName., &projectCaslib.);\n\n   %end;\n \n%mend loop_over_observations;\n\n\n/*-----------------------------------------------------------------------------------------*\n   END OF MACROS\n*------------------------------------------------------------------------------------------*/\n\n\n\n/*-----------------------------------------------------------------------------------------*\n   START OF CODE. \n   Driven by user choice from UI. \n*------------------------------------------------------------------------------------------*/\n\n\n/*-----------------------------------------------------------------------------------------*\n   Scenario 1 : \n   User chooses to only generate a list of rule configurations.\n*------------------------------------------------------------------------------------------*/\n\n%if &generateList.=1 %then %do;\n\n/*-----------------------------------------------------------------------------------------*\n   On the off-chance that the user originally added an input port by mistake, assign dummy.\n*------------------------------------------------------------------------------------------*/\n   \n   %let listOfRuleConfigs=\"WORK._RULECONFIGLISTDUMMY_\";\n\n   %put NOTE: User chose to generate list of rule configurations.;\n\n   proc cas;\n\n/*-----------------------------------------------------------------------------------------*\n   Obtain values from the UI\n*------------------------------------------------------------------------------------------*/\n   \n      projectCaslibFullName=symget(\"projectCaslibFullName\");\n      generatedRuleConfigs=symget(\"generatedRuleConfigs\");\n\n/*-----------------------------------------------------------------------------------------*\n   Extract the project caslib from the name provided by the user.\n*------------------------------------------------------------------------------------------*/\n\n      projectCaslib = scan(projectCaslibFullName,2,\"/\");\n   \n/*-----------------------------------------------------------------------------------------*\n   List all tables within the project caslib which are rule configurations.\n*------------------------------------------------------------------------------------------*/\n\n      table.tableInfo /\n         caslib=projectCaslib\n      ;\n      table.tableInfo result=tableList /\n         caslib=projectCaslib\n      ;\n      ruleConfigList = tableList.TableInfo.where(Name contains \"_RULESCONFIG\");\n\n/*-----------------------------------------------------------------------------------------*\n   Placeholder for future - allow user to choose to list only concepts or category configs. \n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   Create additional variables to hold the type (whether category or concept) and the astore\n   name (which will prove useful in linking to downstream projects later). Also create a \n   variable to hold the analytics project caslib to avoid the user having to retype the same.\n*------------------------------------------------------------------------------------------*/\n\n      ruleConfigList=ruleConfigList.compute(\"Type\",scan(Name,-2,\"_\"));\n      ruleConfigList=ruleConfigList.compute(\"AstoreName\",scan(Name,1,\"_\"));\n      ruleConfigList=ruleConfigList.compute(\"Project_Caslib\",projectCaslib);\n\n/*-----------------------------------------------------------------------------------------*\n   Print to screen for the benefit of the user. \n*------------------------------------------------------------------------------------------*/\n\n      print ruleConfigList;\n\n      saveresult ruleConfigList dataout=&generatedRuleConfigs.;\n\n   quit;\n\n/*-----------------------------------------------------------------------------------------*\n   Generating a list is usually followed by a need to extract them, therefore\n*------------------------------------------------------------------------------------------*/\n   %let listOfRuleConfigs=&generatedRuleConfigs.;\n\n%end;\n\n\n\n/*-----------------------------------------------------------------------------------------*\n   Scenario 2: \n   User chooses to specify a single rule configuration table.\n*------------------------------------------------------------------------------------------*/\n\n%if &singleRuleConfig.=1 %then %do;\n\n/*-----------------------------------------------------------------------------------------*\n   On the off-chance that the user originally added an input port by mistake, assign dummy.\n*------------------------------------------------------------------------------------------*/\n   \n   %let listOfRuleConfigs=\"WORK._RULECONFIGLISTDUMMY_\";\n   %put NOTE: User chose to extract a single rule configuration table.;\n\n/*-----------------------------------------------------------------------------------------*\n   Run the libref check macro in order to obtain the correct Caslib for the output table.\n*------------------------------------------------------------------------------------------*/\n   \n   %_usr_getNameCaslib(&outputCaslibRef);\n   %let outputCaslib=&_usr_nameCaslib.;\n   %let _usr_nameCaslib=;\n   \n   %let projectType=%sysfunc(scan(&ruleConfigName.,2,\"_\"));\n   %let astoreName=%sysfunc(scan(\"&ruleConfigName.\",1,\"_\"));\n   %let projectCaslib=&projectCaslibFullNameSingle.;\n    \n   %extract_rule_config(&ruleConfigName., &projectType., &astoreName., &projectCaslib.);\n\n/*-----------------------------------------------------------------------------------------*\n   Set global var listOfRuleConfigs to blank so that reruns are clean.\n*------------------------------------------------------------------------------------------*/\n\n   %let listOfRuleConfigs=;\n\n%end;\n\n\n\n/*-----------------------------------------------------------------------------------------*\n   Scenario 3:\n   User chooses to attach an input table and extract all configurations within.\n*------------------------------------------------------------------------------------------*/\n\n%if &generateList.=0 AND &singleRuleConfig.=0 %then %do;\n\n   %put NOTE: Attempting extraction.;\n\n/*-----------------------------------------------------------------------------------------*\n   First, check if there is a table provided. We call a macro for the same.\n   Note : For those interested, a little dated but insightful SAS Global Forum paper on \n   the best way to evaluate if a macro variable is blank (as used below), provided here:\n   http://support.sas.com/resources/papers/proceedings09/022-2009.pdf\n*------------------------------------------------------------------------------------------*/\n   %check_input_table(&listOfRuleConfigs.);\n\n\n/*-----------------------------------------------------------------------------------------*\n   Run the libref check macro in order to obtain the correct Caslib for the output table.\n*------------------------------------------------------------------------------------------*/\n   \n   %_usr_getNameCaslib(&outputCaslibRef);\n   %let outputCaslib=&_usr_nameCaslib.;\n   %let _usr_nameCaslib=;\n\n\n/*-----------------------------------------------------------------------------------------*\n   Count the number of observations and create a loop over each observation.\n*------------------------------------------------------------------------------------------*/\n   %loop_over_observations(&listOfRuleConfigs.);\n\n\n%end;\n\n\n\n\n\n\n\n\n\n\n\n\n"}}