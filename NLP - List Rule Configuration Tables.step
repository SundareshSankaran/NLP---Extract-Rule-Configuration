{"creationTimeStamp":"2023-05-03T01:15:10.134Z","modifiedTimeStamp":"2023-05-03T03:40:12.915Z","createdBy":"viya_admin","modifiedBy":"viya_admin","name":"NLP - List Rule Configuration Tables.step","displayName":"NLP - List Rule Configuration Tables.step","localDisplayName":"NLP - List Rule Configuration Tables.step","properties":{},"links":[{"method":"GET","rel":"self","href":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","uri":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","type":"application/vnd.sas.data.flow.step"},{"method":"GET","rel":"alternate","href":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","uri":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","type":"application/vnd.sas.data.flow.step.summary"},{"method":"GET","rel":"up","href":"/dataFlows/steps","uri":"/dataFlows/steps","type":"application/vnd.sas.collection","itemType":"application/vnd.sas.data.flow.step.summary"},{"method":"PUT","rel":"update","href":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","uri":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","type":"application/vnd.sas.data.flow.step","responseType":"application/vnd.sas.data.flow.step"},{"method":"DELETE","rel":"delete","href":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","uri":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481"},{"method":"GET","rel":"transferExport","href":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","uri":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","responseType":"application/vnd.sas.transfer.object"},{"method":"PUT","rel":"transferImportUpdate","href":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","uri":"/dataFlows/steps/bdfed0a1-218f-432e-a95d-14b3db231481","type":"application/vnd.sas.transfer.object","responseType":"application/vnd.sas.summary"}],"metadataVersion":0.0,"version":2,"type":"code","flowMetadata":{"inputPorts":[],"outputPorts":[{"name":"derivedRuleConfigs","displayName":"derivedRuleConfigs","localDisplayName":"derivedRuleConfigs","minEntries":1,"maxEntries":1,"defaultEntries":0,"type":"table","supportsView":false,"requiresStructure":false}]},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"param\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Parameters\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"inputParam\",\n\t\t\t\t\t\"type\": \"section\",\n\t\t\t\t\t\"label\": \"Input parameters\",\n\t\t\t\t\t\"open\": true,\n\t\t\t\t\t\"visible\": \"\",\n\t\t\t\t\t\"children\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"id\": \"projectCaslibFullName\",\n\t\t\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\t\t\"label\": \"Provide caslib name from SAS Visual Text Analytics (VTA) - Model Studio project:\",\n\t\t\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"derivedRuleConfigs\",\n\t\t\t\t\t\"type\": \"outputtable\",\n\t\t\t\t\t\"label\": \"List of rule configurations:\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"Provide a SAS dataset (sas7bdat)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": \"page2\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"About\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"about\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"NLP - List Rule Configuration Tables\\n\\nThis custom step lists out rule configuration tables generated by a rules-based SAS Visual Text Analytics Concepts or Categories model, for use in downstream applications.\\n\\nModern AI demands a greater degree of transparency and ease of access to metadata. Rule configurations can help explain model logic to business stakeholders, promote better model governance, customize models further and enable additional visualisation.\\n\\nThis custom step identifies such rule configuration tables associated with a project.  Its output is then used by another custom step (NLP - Extract Rule Configuration) to extract a specified ruleconfig table.  Both  custom steps require a SAS Visual Text Analytics license.\\n \\n\\nParameters:\\n\\nNote that this custom step runs on data loaded to a SAS Cloud Analytics Services (CAS) library (known as a caslib). Ensure you are connected to CAS before running this step.\\n\\n\\nInput parameters:\\n\\n- Caslib name for Model Studio project (text field, required): this is obtained from a SAS Model Studio (VTA) project. Open the project and go to the Data tab. Copy the entire text appearing on the Properties pane on the right hand side, under the section \\\"Location\\\" (of the form cas-shared-default/Analytics_project_xxx).  Paste the entire selection in this field.  The custom step contains methods to parse out the caslib portion of this text.  \\n\\n\\nOutput specifications:\\n\\n- Output list of rule configurations (table, output port, required): connect a SAS dataset which will contain a list of all rule configuration tables obtained from this project.  \\n\\nNote: please DON'T add a CAS table to this output port as this will lead to the step erroring out.  In any event, a CAS table isn't necessary for this output, which typically does not contain more than 4-5 observations.  \\n\\nThe rule configuration tables listed in the output are generally of the form <astore_name>_<type>_RULESCONFIG.sashdat.  The <astore_name> is usually a long alphanumeric string which is also the same name as the model binary generated.  The <type> could refer to either CATEGORY or CONCEPTS based on the model in question.\\n\\n\\nDocumentation:\\n\\n- The table.caslibInfo CAS action : https://go.documentation.sas.com/doc/en/pgmsascdc/v_038/caspg/cas-table-caslibinfo.htm is used for purposes of listing out the tables within a SAS Model Studio's project caslib.  Typical users may find it difficult to access information in the project caslib through the interface, therefore raising need for this custom step.\\n\\n\\nCreated / contact : \\n\\n- Sundaresh Sankaran (sundaresh.sankaran@sas.com)\\n\\n\\nVersion : 1.0.   (02MAY2023)\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"projectCaslibFullName\": \"\",\n\t\t\"derivedRuleConfigs\": {\n\t\t\t\"library\": \"\",\n\t\t\t\"table\": \"\"\n\t\t}\n\t}\n}","templates":{"SAS":"/* SAS templated code goes here */\n\n\n/* -----------------------------------------------------------------------------------------* \n   This macro creates a global macro variable called _usr_nameCaslib\n   that contains the caslib name (aka. caslib-reference-name) associated with the libname \n   and assumes that the libname is using the CAS engine.\n\n   As sysvalue has a length of 1024 chars, we use the trimmed option in proc sql\n   to remove leading and trailing blanks in the caslib name.\n*------------------------------------------------------------------------------------------ */\n\n%macro _usr_getNameCaslib(_usr_LibrefUsingCasEngine); \n\n   %global _usr_nameCaslib;\n   %let _usr_nameCaslib=;\n\n   proc sql noprint;\n      select sysvalue into :_usr_nameCaslib trimmed from dictionary.libnames\n      where libname = upcase(\"&_usr_LibrefUsingCasEngine.\") and upcase(sysname)=\"CASLIB\";\n   quit;\n\n%mend _usr_getNameCaslib;\n\n\nproc cas;\n\n/*-----------------------------------------------------------------------------------------*\n   Obtain values from the UI\n*------------------------------------------------------------------------------------------*/\n   \n   projectCaslibFullName=symget(\"projectCaslibFullName\");\n   derivedRuleConfigs=symget(\"derivedRuleConfigs\");\n\n/*-----------------------------------------------------------------------------------------*\n   Extract the project caslib from the name provided by the user.\n*------------------------------------------------------------------------------------------*/\n\n   projectCaslib = scan(projectCaslibFullName,2,\"/\");\n   \n/*-----------------------------------------------------------------------------------------*\n   List all tables within the project caslib which are rule configurations.\n*------------------------------------------------------------------------------------------*/\n\n   table.tableInfo /\n      caslib=projectCaslib\n;\n   table.tableInfo result=tableList /\n      caslib=projectCaslib\n;\n   ruleConfigList = tableList.TableInfo.where(Name contains \"_RULESCONFIG\");\n\n/*-----------------------------------------------------------------------------------------*\n   Placeholder for future - allow user to choose to list only concepts or category configs. \n*------------------------------------------------------------------------------------------*/\n\n/*-----------------------------------------------------------------------------------------*\n   Create additional variables to hold the type (whether category or concept) and the astore\n   name (which will prove useful in linking to downstream projects later). Also create a \n   variable to hold the analytics project caslib to avoid the user having to retype the same.\n*------------------------------------------------------------------------------------------*/\n\n   ruleConfigList=ruleConfigList.compute(\"Type\",scan(Name,-2,\"_\"));\n   ruleConfigList=ruleConfigList.compute(\"AstoreName\",scan(Name,1,\"_\"));\n   ruleConfigList=ruleConfigList.compute(\"Project_Caslib\",projectCaslib);\n\n/*-----------------------------------------------------------------------------------------*\n   Print to screen for the benefit of the user. \n*------------------------------------------------------------------------------------------*/\n\n   print ruleConfigList;\n\n   saveresult ruleConfigList dataout=&derivedRuleConfigs.;\n\nquit;"}}